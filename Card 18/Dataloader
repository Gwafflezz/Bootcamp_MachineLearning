{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNO8ke9BPqmsO8Ngj+HqTXf"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":5,"metadata":{"id":"aV_zco9Fw-Ao","executionInfo":{"status":"ok","timestamp":1724812737691,"user_tz":180,"elapsed":340,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"outputs":[],"source":["from torch.utils.data import Dataset, DataLoader\n","import torch\n","import torch.nn as nn"]},{"cell_type":"code","source":["x = [[1,2],[3,4],[5,6],[7,8]]\n","y = [[3],[7],[11],[15]]"],"metadata":{"id":"yhxF8Yhe2D4A","executionInfo":{"status":"ok","timestamp":1724812824322,"user_tz":180,"elapsed":355,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["X = torch.tensor(x).float()\n","Y = torch.tensor(y).float()"],"metadata":{"id":"g7_95B8x2wu2","executionInfo":{"status":"ok","timestamp":1724812864935,"user_tz":180,"elapsed":448,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["device = 'cuda' if torch.cuda.is_available() else 'cpu'"],"metadata":{"id":"RJkahkW726oQ","executionInfo":{"status":"ok","timestamp":1724812897603,"user_tz":180,"elapsed":395,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["X = X.to(device)\n","Y = Y.to(device)"],"metadata":{"id":"3cYrZpPx3CnC","executionInfo":{"status":"ok","timestamp":1724812912342,"user_tz":180,"elapsed":412,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["class MyDataset(Dataset):\n","    def __init__(self,x,y):\n","        self.x = torch.tensor(x).float().to(device)\n","        self.y = torch.tensor(y).float().to(device)\n","    def __len__(self):\n","        return len(self.x)\n","    def __getitem__(self,ix):\n","        return self.x[ix], self.y[ix]\n",""],"metadata":{"id":"3x-XAVh63GND","executionInfo":{"status":"ok","timestamp":1724813335061,"user_tz":180,"elapsed":412,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["ds = MyDataset(x,y)"],"metadata":{"id":"ZhtarKFS3rvA","executionInfo":{"status":"ok","timestamp":1724813336080,"user_tz":180,"elapsed":7,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["d1 = DataLoader(ds,batch_size=3, shuffle=True)"],"metadata":{"id":"YOgfdVxH3vAR","executionInfo":{"status":"ok","timestamp":1724813368292,"user_tz":180,"elapsed":340,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["for x,y in d1:\n","  print(x,y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rqOL_F3A43zr","executionInfo":{"status":"ok","timestamp":1724813389770,"user_tz":180,"elapsed":335,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"cc542c70-ebd9-4b8b-ef8f-a38398a17bb4"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[3., 4.],\n","        [5., 6.],\n","        [7., 8.]]) tensor([[ 7.],\n","        [11.],\n","        [15.]])\n","tensor([[1., 2.]]) tensor([[3.]])\n"]}]},{"cell_type":"code","source":["# usando DataLoader\n","import torch\n","import torch.nn as nn\n","from torch.optim import SGD\n"],"metadata":{"id":"cRQJLrPk46y6","executionInfo":{"status":"ok","timestamp":1724813737295,"user_tz":180,"elapsed":417,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["class MyNeuralNet(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    self.layer1 = nn.Linear(2,8)\n","    self.activation = nn.ReLU()\n","    self.layer2 = nn.Linear (8,1)\n","\n","  def forward(self,x):\n","    x = self.layer1(x)\n","    x = self.activation(x)\n","    x = self.layer2(x)\n","    return x\n",""],"metadata":{"id":"OMjmoNa66Pay","executionInfo":{"status":"ok","timestamp":1724813852012,"user_tz":180,"elapsed":447,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["model = MyNeuralNet()\n","loss_func = nn.MSELoss()\n","opt = SGD(model.parameters(), lr=0.001)"],"metadata":{"id":"mkx4fgh96frV","executionInfo":{"status":"ok","timestamp":1724813983569,"user_tz":180,"elapsed":2155,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["losses = []\n","for _ in range(50):\n","    for data in d1:\n","        opt.zero_grad()\n","        x1,y1 = data\n","        loss_value = loss_func(model(x1),y1)\n","        loss_value.backward()\n","\n","        opt.step()\n","        losses.append(loss_value.cpu().detach().numpy())"],"metadata":{"id":"4nT_KFu36uim","executionInfo":{"status":"ok","timestamp":1724814060479,"user_tz":180,"elapsed":342,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"EJVCMwz07YSI"},"execution_count":null,"outputs":[]}]}